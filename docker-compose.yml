version: '3.8'
services:
  mtr2mqtt:
    image: tvallas/mtr2mqtt:latest
    container_name: mtr2mqtt
    networks:
      - backend
    restart: always
    depends_on:
      - mosquitto
    volumes:
      - type: bind
        source: "./metadata.yml"
        target: "/tmp/metadata.yml"
    environment:
      MTR2MQTT_MQTT_HOST: "mosquitto"
      MTR2MQTT_METADATA_FILE: "/tmp/metadata.yml"
      MTR2MQTT_QUIET: "true"
    devices:
      - "/dev/ttyUSB0:/dev/ttyUSB0"
  telegraf:
    image: telegraf:latest
    container_name: telegraf
    networks:
      - backend
    restart: always
    volumes:
    - ./telegraf.conf:/etc/telegraf/telegraf.conf:ro
    - telegraf_data:/tmp/telegraf/
    env_file:
    - 'influxdb.env'
    depends_on:
    - influxdb
  mosquitto:
    image: eclipse-mosquitto:latest
    container_name: mosquitto
    networks:
      - backend
    restart: always
    volumes:
      - type: bind
        source: "./mosquitto.conf"
        target: "/mosquitto/config/mosquitto.conf"
      - mosquitto_data:/mosquitto/data/
    ports:
      - "1883:1883"
  influxdb:
    image: influxdb:1.8
    container_name: influxdb
    restart: always
    ports:
      - "8086:8086"
    networks:
      - backend
    env_file:
      - 'influxdb.env'
    environment:
      - INFLUXDB_REPORTING_DISABLED=true
    volumes:
      - influxdb_data:/var/lib/influxdb
  grafana:
    image: grafana/grafana
    container_name: grafana
    restart: always
    ports:
      - 3000:3000
    networks:
      - web
      - backend
    volumes:
      - grafana-storage:/var/lib/grafana
      - ./grafana/provisioning/:/etc/grafana/provisioning/
    depends_on:
      - influxdb
    environment:
      GF_AUTH_ANONYMOUS_ENABLED: "true"
      GF_SERVER_ROOT_URL: "https://$GRAFANA_FQDN"
      GF_RENDERING_SERVER_URL: "http://renderer:8081/render"
      GF_RENDERING_CALLBACK_URL: "http://grafana:3000/"
      GF_LOG_FILTERS: "rendering:debug"
    labels:
      #### Labels define the behavior and rules of the traefik proxy for this container ####
      - "traefik.enable=true" # <== Enable traefik to proxy this container
      - "traefik.docker.network=web"
      - "traefik.http.routers.grafana.rule=Host(`$GRAFANA_FQDN`)" # <== Your Domain Name goes here for the http rule
      - "traefik.http.routers.grafana.entrypoints=web" # <== Defining the entrypoint for http
      - "traefik.http.routers.grafana.middlewares=redirect@file" # <== This is a middleware to redirect to https
      - "traefik.http.routers.grafana-secured.rule=Host(`$GRAFANA_FQDN`)" # <== Your Domain Name for the https rule
      - "traefik.http.routers.grafana-secured.entrypoints=web-secured" # <== Defining entrypoint for https
      - "traefik.http.routers.grafana-secured.tls.certresolver=mytlschallenge" # <== Defining certsresolvers for https
  renderer:
    image: grafana/grafana-image-renderer:3.3.0
    ports:
      - 8081
    environment:
      ENABLE_METRICS: 'true'
    networks:
      - backend
  traefik:
      image: traefik:v2.4
      restart: always
      container_name: traefik
      ports:
        - "80:80" # <== http
        - "8080:8080" # <== :8080 is where the dashboard runs on
        - "443:443" # <== https
      command:
      #### These are the CLI commands that will configure Traefik and tell it how to work! ####
        ## API Settings - https://docs.traefik.io/operations/api/, endpoints - https://docs.traefik.io/operations/api/#endpoints ##
        - --api.insecure=true # <== Enabling insecure api, NOT RECOMMENDED FOR PRODUCTION
        - --api.dashboard=true # <== Enabling the dashboard to view services, middlewares, routers, etc...
        - --api.debug=true # <== Enabling additional endpoints for debugging and profiling
        ## Log Settings (options: ERROR, DEBUG, PANIC, FATAL, WARN, INFO) - https://docs.traefik.io/observability/logs/ ##
        - --log.level=INFO # <== Setting the level of the logs from traefik
        ## Provider Settings - https://docs.traefik.io/providers/docker/#provider-configuration ##
        - --providers.docker=true # <== Enabling docker as the provider for traefik
        - --providers.docker.exposedbydefault=false # <== Don't expose every container to traefik, only expose enabled ones
        - --providers.file.filename=/dynamic.yaml # <== Referring to a dynamic configuration file
        - --providers.docker.network=web # <== Operate on the docker network named web
        ## Entrypoints Settings - https://docs.traefik.io/routing/entrypoints/#configuration ##
        - --entrypoints.web.address=:80 # <== Defining an entrypoint for port :80 named web
        - --entrypoints.web-secured.address=:443 # <== Defining an entrypoint for https on port :443 named web-secured
        ## Certificate Settings (Let's Encrypt) -  https://docs.traefik.io/https/acme/#configuration-examples ##
        - --certificatesresolvers.mytlschallenge.acme.tlschallenge=true # <== Enable TLS-ALPN-01 to generate and renew ACME certs
        - --certificatesresolvers.mytlschallenge.acme.email=$TRAEFIK_EMAIL # <== Setting email for certs
        - --certificatesresolvers.mytlschallenge.acme.storage=/letsencrypt/acme.json # <== Defining acme file to store cert information
      volumes:
        - traefik_data:/letsencrypt # <== Volume for certs (TLS)
        - /var/run/docker.sock:/var/run/docker.sock # <== Volume for docker admin
        - ./dynamic.yaml:/dynamic.yaml # <== Volume for dynamic conf file
      networks:
        - web # <== Placing traefik on the network named web, to access containers on this network
      labels:
      #### Labels define the behavior and rules of the traefik proxy for this container ####
        - "traefik.enable=true" # <== Enable traefik on itself to view dashboard and assign subdomain to view it
        - "traefik.http.routers.api.rule=Host(`$TRAEFIK_FQDN`)" # <== Setting the domain for the dashboard
        - "traefik.http.routers.api.service=api@internal" # <== Enabling the api to be a service to access
        - "traefik.http.routers.api.middlewares=api-auth"
        - "traefik.http.middlewares.api-auth.basicauth.users=$TRAEFIK_DASHBOARD_BASIC_AUTH"
networks:
  web:
    external: false
    name: web
  backend:
    external: false
    name: backend

volumes:
  mosquitto_data:
  telegraf_data:
  influxdb_data:
  grafana-storage:
  traefik_data:
